buildscript {
    ext.kotlin_version = "1.6.20"
    ext.kotlin_reflect_version = "1.6.20"

    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
        maven { url = "https://maven.parchmentmc.org" }
        mavenCentral()
    }
    dependencies {
        classpath group: "org.jetbrains.kotlin", name: "kotlin-gradle-plugin", version: kotlin_version
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.23", changing: true
        classpath group: "org.parchmentmc", name: "librarian", version: "1.+"
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
    }
}

apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.parchmentmc.librarian.forgegradle"
apply plugin: "org.spongepowered.mixin"

group = "dev.psygamer"
archivesBaseName = "wireframe"
version = "0.1"

java {
    withSourcesJar()
    withJavadocJar()

    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

configurations {
    shade
    implementation.extendsFrom shade
}

minecraft {
    mappings channel: "parchment", version: "2022.03.06-1.16.5"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                wireframe {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                wireframe {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            args "--mod", "wireframe", "--all",
                 "--existing", file("src/main/resources/").toString(),
                 "--existing", file("src/generated/resources/").toString(),
                 "--output", file("src/generated/resources/")

            mods {
                wireframe {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "wireframe.refmap.json"
    config "wireframe.mixins.json"
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    mavenCentral()
    maven {
        name = 'KotlinForForge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:1.16.5-36.2.26"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    // Is probably going to become part of Wireframe
    implementation("thedarkcolour:kotlinforforge:1.16.0")

    // TODO: Use stable version once 1.10.6 releases
    shade "org.joml:joml:1.10.6-SNAPSHOT"
}

jar {
    finalizedBy "reobfJar"

    manifest {
        attributes([
                "Specification-Title"     : project.archivesBaseName,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    configurations.shade.each { dep ->
        // For some reason kotlin-stdlib is included in shade
        // Even though kotlin-stdlib should be shipped with Wireframe in the future,
        // for now it only inflates the JAR size which is why it's excluded
        if (dep.getAbsolutePath().containsIgnoreCase("org.jetbrains")) {
            return
        }

        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}
task devJar(type: Jar) {
    from(sourceSets.main.java)
    from(sourceSets.main.kotlin)
    from(sourceSets.main.output)

    configurations.shade.each { dep ->
        // See above
        if (dep.getAbsolutePath().containsIgnoreCase("org.jetbrains")) {
            return
        }

        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    duplicatesStrategy "exclude"

    classifier = "dev"
}

artifacts {
    archives devJar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def gitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()

publishing {
    publications {
        dev(MavenPublication) {
            artifactId = archivesBaseName
            version = version
            from components.java
        }
        release(MavenPublication) {
            artifactId = "${archivesBaseName}-dev"
            version = "${version}-${gitHash}"
            from components.java
        }
    }

    repositories {
        maven {
            name = "repsy"
            url = "https://repo.repsy.io/mvn/psygamer/wireframe"
            credentials {
                username = "psygamer"
                password = System.getenv("REPSY_PASSWORD")
            }
        }
    }
}
